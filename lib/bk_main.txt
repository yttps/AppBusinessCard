//main.dart
import 'package:app_card/services/notification.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

import 'login_provider.dart';
import 'models/login.dart';
import 'services/users.dart';
import 'screens/homepage.dart';
import 'screens/login.dart';
import 'screens/register.dart';
import 'screens/contact.dart';
import 'screens/notification.dart';
import 'screens/qrcode.dart';
import 'screens/scanqr.dart';
import 'screens/setting.dart';
import 'screens/chat.dart';

// เพิ่มการนิยามตัวแปร
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

final api = "https://business-api-638w.onrender.com";

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();

  NotificationService().initNotification();

  // // กำหนดค่าและเริ่มต้นการใช้งาน flutterLocalNotificationsPlugin
  // const AndroidInitializationSettings initializationSettingsAndroid =
  //     AndroidInitializationSettings('@mipmap/ic_launcher');
  // final InitializationSettings initializationSettings = InitializationSettings(
  //   android: initializationSettingsAndroid,
  // );
  // await flutterLocalNotificationsPlugin.initialize(
  //   initializationSettings,
  //   onDidReceiveNotificationResponse: (NotificationResponse notificationResponse) async {
  //     if (notificationResponse.payload != null) {
  //       // จัดการเมื่อผู้ใช้แตะที่การแจ้งเตือน
  //       print('notification payload: ${notificationResponse.payload}');
  //     }
  //   },
  // );

  // FirebaseMessaging messaging = FirebaseMessaging.instance;

  // // รับและจัดการ token สำหรับอุปกรณ์นี้
  // messaging.getToken().then((String? token) {
  //   print("FCM Token: $token");
  //   // บันทึก token ในที่ที่ต้องการ เช่น Firestore
  // });

  // // ตั้งค่า handlers สำหรับการแจ้งเตือนในฟอร์กราวด์และพื้นหลัง
  // FirebaseMessaging.onMessage.listen((RemoteMessage message) {
  //   print("Message received in foreground: ${message.notification?.title}");
  //   final String title = message.notification?.title ?? 'No Title';
  //   final String body = message.notification?.body ?? 'No Body';
  //   showNotification(title, body);
  //   print("Message data: ${message.notification?.body}");
  // });

  // FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
  //   print("Message opened app: ${message.notification?.title}");
  //   // นำทางไปยังหน้าที่ต้องการ
  // });

  // FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  final UserService userService = UserService();
  SharedPreferences prefs = await SharedPreferences.getInstance();
  String? loginData = prefs.getString('loginData');
  Login? login;
  print('loginData: $loginData');
  if (loginData != null) {
    final Map<String, dynamic> loginMap = jsonDecode(loginData);
    login = Login.fromJson(loginMap);
  }

  runApp(BusinessCardApp(login: login));
}


// Future<void> showNotification(String title, String body) async {
//   const AndroidNotificationDetails androidPlatformChannelSpecifics =
//       AndroidNotificationDetails(
//     'your_channel_id',
//     'your_channel_name',
//     importance: Importance.max,
//     priority: Priority.high,
//     showWhen: false,
//   );
//   const NotificationDetails platformChannelSpecifics = NotificationDetails(
//     android: androidPlatformChannelSpecifics,
//   );
//   await flutterLocalNotificationsPlugin.show(
//     0,
//     title,
//     body,
//     platformChannelSpecifics,
//     payload: 'item x',
//   );
// }


// Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
//   await Firebase.initializeApp();
//   print("Handling a background message: ${message.messageId}");
//   print("Message data: ${message.notification?.body}");
//   showNotification(message.notification?.title ?? 'No Title', message.notification?.body ?? 'No Body');
// }

class BusinessCardApp extends StatelessWidget {
  final Login? login;

  const BusinessCardApp({Key? key, this.login}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (_) => LoginProvider()..setLogin(login),
      child: MaterialApp(
        title: 'Business Card App',
        theme: ThemeData(
          primarySwatch: Colors.blue,
        ),
        initialRoute: login != null ? '/home' : '/',
        routes: {
          '/': (context) => LoginScreen(),
          '/home': (context) => HomePage(),
          '/contact': (context) => ContactScreen(),
          '/qr_code': (context) => QRCodeScreen(),
          '/scan_qr': (context) => ScanQRScreen(),
          '/notifications': (context) => NotificationsScreen(),
          '/chat': (context) => ChatScreen(),
          '/settings': (context) => SettingsScreen(),
          '/register': (context) => RegisterScreen(),
        },
      ),
    );
  }
}


// class BusinessCardApp extends StatelessWidget {
//   final Login? login;

//   const BusinessCardApp({Key? key, this.login}) : super(key: key);

//   @override
//   Widget build(BuildContext context) {
//     return ChangeNotifierProvider(
//       create: (_) => LoginProvider()..setLogin(login),
//       child: MaterialApp(
//         title: 'Business Card App',
//         theme: ThemeData(
//           primarySwatch: Colors.blue,
//         ),
//         initialRoute: login != null ? '/home' : '/',
//         routes: {
//           '/': (context) => LoginScreen(),
//           '/home': (context) => HomePage(),
//           '/contact': (context) => ContactScreen(),
//           '/qr_code': (context) => QRCodeScreen(),
//           '/scan_qr': (context) => ScanQRScreen(),
//           '/notifications': (context) => NotificationsScreen(),
//           '/chat': (context) => ChatScreen(),
//           '/settings': (context) => SettingsScreen(),
//           '/register': (context) => RegisterScreen(),
//         },
//       ),
//     );
//   }
// }





import 'package:app_card/main.dart';
import 'package:app_card/services/friends.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:provider/provider.dart';
import 'package:app_card/models/request.dart';
import 'package:app_card/models/user.dart';
import 'package:app_card/services/requests.dart';
import 'package:app_card/services/users.dart';
import 'package:app_card/login_provider.dart';

class NotificationsScreen extends StatefulWidget {
  @override
  _NotificationsScreenState createState() => _NotificationsScreenState();
}

class _NotificationsScreenState extends State<NotificationsScreen> {
  List<Request> pendingRequests = [];
  final RequestServices requestService = RequestServices();
  final UserService userService = UserService();

  @override
  void initState() {
    super.initState();
    loadPendingRequests();
    Provider.of<LoginProvider>(context, listen: false).addListener(() {
      loadPendingRequests();
    });
  }

  Future<void> loadPendingRequests() async {
    final loginProvider = Provider.of<LoginProvider>(context, listen: false);
    String userId = loginProvider.login!.id;

    try {
      var requests = await requestService.getRequestByresponder(userId);
      setState(() {
        pendingRequests = requests.where((req) => req.status == '0').toList();
      });
      if (requests.isNotEmpty) {
        await showNotification('New Request', 'คุณมีคำขอใหม่');
      }
    } catch (e) {
      print('เกิดข้อผิดพลาดในการโหลดคำขอ: $e');
    }
  }

  Future<void> respondToRequest(Request request, String status) async {
  try {
    await requestService.updateRequestStatus(request.id, status);

    setState(() {
      pendingRequests.removeWhere((r) => r.id == request.id);
    });

    String message = status == '1' ? 'ยืนยันคำขอแล้ว' : 'ยกเลิกคำขอแล้ว';
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(message)));
    await showNotification('การตอบรับคำขอ', message);

    // Call createFriend if the request is accepted
    if (status == '1') {
      final loginProvider = Provider.of<LoginProvider>(context, listen: false);
      String userId = loginProvider.login!.id;
      await FriendService().createFriend(userId, request.requesterId);
      await FriendService().createFriend(request.requesterId, userId);
    }
  } catch (e) {
    print('เกิดข้อผิดพลาดในการตอบคำขอ: $e');
  }
}


  Future<void> showNotification(String title, String body) async {
    const AndroidNotificationDetails androidPlatformChannelSpecifics = AndroidNotificationDetails(
      'your_channel_id',
      'your_channel_name',
      importance: Importance.max,
      priority: Priority.high,
      showWhen: false,
    );
    const NotificationDetails platformChannelSpecifics = NotificationDetails(android: androidPlatformChannelSpecifics);
    await flutterLocalNotificationsPlugin.show(
      0,
      title,
      body,
      platformChannelSpecifics,
      payload: 'item x',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('NOTIFICATIONS'),
      ),
      body: pendingRequests.isEmpty
          ? Center(child: CircularProgressIndicator())
          : Padding(
              padding: const EdgeInsets.all(16.0),
              child: ListView.builder(
                itemCount: pendingRequests.length,
                itemBuilder: (context, index) {
                  var request = pendingRequests[index];
                  return FutureBuilder<User>(
                    future: userService.getUserByid(request.requesterId),
                    builder: (context, snapshot) {
                      if (snapshot.connectionState == ConnectionState.waiting) {
                        return Center(child: CircularProgressIndicator());
                      } else if (snapshot.hasError) {
                        return ListTile(
                          title: Text('เกิดข้อผิดพลาดในการดึงข้อมูลผู้ใช้'),
                        );
                      } else {
                        var user = snapshot.data;
                        return Card(
                          elevation: 3,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: ListTile(
                            leading: Icon(Icons.notification_important),
                            title: Text('${user?.firstname} ${user?.lastname}'),
                            subtitle: Text('คำขอจาก ${user?.email}'),
                            trailing: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                IconButton(
                                  icon: Icon(Icons.check),
                                  color: Colors.green,
                                  onPressed: () => respondToRequest(request, '1'),
                                ),
                                IconButton(
                                  icon: Icon(Icons.close),
                                  color: Colors.red,
                                  onPressed: () => respondToRequest(request, 'declined'),
                                ),
                              ],
                            ),
                          ),
                        );
                      }
                    },
                  );
                },
              ),
            ),
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'HOME',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.contacts),
            label: 'CONTACT',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.qr_code_scanner),
            label: 'SCAN QR',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.qr_code),
            label: 'QR CODE',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: 'SETTINGS',
          ),
        ],
        currentIndex: 0,
        selectedItemColor: Colors.blue,
        unselectedItemColor: Colors.grey,
        onTap: (int index) {
          switch (index) {
            case 0:
              Navigator.pushReplacementNamed(context, '/home');
              break;
            case 1:
              Navigator.pushReplacementNamed(context, '/contact');
              break;
            case 2:
              Navigator.pushReplacementNamed(context, '/scan_qr');
              break;
            case 3:
              Navigator.pushReplacementNamed(context, '/qr_code');
              break;
            case 4:
              Navigator.pushReplacementNamed(context, '/settings');
              break;
          }
        },
      ),
    );
  }
}
